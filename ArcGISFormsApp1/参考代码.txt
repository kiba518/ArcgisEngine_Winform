 //IWorkspace workspace = (pFeatureClass as IDataset).Workspace;
        //IWorkspaceEdit workspaceEdit = workspace as IWorkspaceEdit;

        //workspaceEdit.StartEditing(false);
        //              workspaceEdit.StartEditOperation();

        //             // IFeatureClassWrite featureClassWrite =pFeatureClass as IFeatureClassWrite;
        //              IFeature tempFeature = new Feature() as IFeature;
        //              for (int k = 0; k<featColl.Count; k++)
        //                  {
        //                    tempFeature = featColl[k];   //featColl是一个List类型的对象
        //                    tempFeature = pFeatureClass.CreateFeature();
        //                    for (int j = 2; j<featColl[k].Fields.FieldCount; j++)//前两个字段不可写
        //                        {
        //                        tempFeature.set_Value(j, featColl[k].get_Value(j));
        //                        }
        //                    //featureClassWrite.WriteFeature(featColl[k]);
        //                            IPoint p = featColl[k].Shape as IPoint;  //一定要加上这两行，否则加载后看不到几何图形
        //tempFeature.Shape = p;
        //                    tempFeature.Store();            
        //                  }
        //              workspaceEdit.StopEditOperation();
        //              workspaceEdit.StopEditing(true);


		 #region 验证图层的类型和画的图像的类型是否一致 
                IGeoDataset geoDataset = dataset as IGeoDataset;
                IGeometry geometryTemp = new PolygonClass();
                geometryTemp.Project(geoDataset.SpatialReference);//导入空间数据
                if (geometryTemp != null)
                {
                    if (geometryTemp.GeometryType != geometry.GeometryType)
                    {
                        MessageBox.Show("图层类型和绘制的图形类型不一致，不能添加。");
                        return;
                    }
                    var polygonTemp = geometryTemp as PolygonClass; 
                }
                else
                {
                    IGeometry geometryLineTemp = new PolylineClass();
                    geometryLineTemp.Project(geoDataset.SpatialReference);//导入空间数据
                    if (geometryLineTemp.GeometryType != geometry.GeometryType)
                    {
                        MessageBox.Show("图层类型和绘制的图形类型不一致，不能添加。");
                        return;
                    }
                }
                #endregion

  #region 使用IFeature插入，（feature.Shape = pt 如果抛异常这个集合中找不到此项目，很大可能是图层和插入的几何图形类型不一致）

                ////先定义一个编辑的工作空间, 然后将其转化为数据集, 最后转化为编辑工作空间
                //IWorkspaceEdit w = (featureClass as IDataset).Workspace as IWorkspaceEdit;

                ////开始事务操作
                //w.StartEditing(false);
                ////开始编辑
                //w.StartEditOperation();
                ////创建一个(点)要素
                //IFeature feature = featureClass.CreateFeature();

                //int iShape = featureClass.FindField("SHAPE");
                //IGeometryDef geoDef = feature.Fields.Field[iShape].GeometryDef;
                //IGeometryDefEdit geoDefEdit = geoDef as IGeometryDefEdit;
                //geoDefEdit.HasZ_2 = false;

                //IZAware pZAware = pt as IZAware;
                //pZAware.ZAware = true;

                ////赋值该要素的Shape属性
                //feature.Shape = pt;
                //feature.Store(); //保存要素类的修改——完成点要素类生成，此时生成的点要素类只有图形(shape/Geometry), 没有普通属性

                ////结束编辑
                //w.StopEditOperation();
                ////结束事务操作
                //w.StopEditing(true);
                #endregion




			    esriGeometryType.esriGeometryAny://"任何类型（Any valid geometry）"               
                esriGeometryType.esriGeometryBag://"任意几何类型的集合（GeometryBag）"               
                esriGeometryType.esriGeometryBezier3Curve:// "贝兹曲线（BezierCurve）"               
                esriGeometryType.esriGeometryCircularArc:// "圆弧（CircularArc）"               
                esriGeometryType.esriGeometryEllipticArc://"椭圆弧（EllipticArc）"               
                esriGeometryType.esriGeometryEnvelope://"外包（Envelope）"               
                esriGeometryType.esriGeometryLine:// "线段（Line）"               
                esriGeometryType.esriGeometryMultiPatch:// "表面几何（MultiPatch）"               
                esriGeometryType.esriGeometryMultipoint://"多点（Multipoint）"               
                esriGeometryType.esriGeometryNull:// "未知类型（Unknown）"               
                esriGeometryType.esriGeometryPath://"路径（Path）"               
                esriGeometryType.esriGeometryPoint://"点（Point）"               
                esriGeometryType.esriGeometryPolygon://"多边形（Polygon）"               
                esriGeometryType.esriGeometryPolyline:// "多段线（Polyline）"               
                esriGeometryType.esriGeometryRay://"射线（Ray）"               
                esriGeometryType.esriGeometryRing://"环（Ring）"               
                esriGeometryType.esriGeometrySphere://"球体（Sphere）"               
                esriGeometryType.esriGeometryTriangleFan:// "三角扇形（TriangleFan）"               
                esriGeometryType.esriGeometryTriangleStrip://"三角带（TriangleStrip）"               
                esriGeometryType.esriGeometryTriangles:// "三角形（Triangles）"


                 IFeatureClass 对查询定义了两个方法IFeatureClass.Search 和 IFeatureClass.Select。
                 Search 方法需要传入两个参数，一个是过滤器；另外一个是布尔值，用于说明放回的要素游标是否被回收，
                 一般的，如果仅仅是为了读取数据，那么这个参数应该是 true，如果要对选择出来的要素更新，那么这个参数应该设置为 false。
                 void Search (IFeatureClass _pFeatureClass, bool _Bool)
                {
                  IFeature pFt1, pFt2;
                  IFeatureCursor pFtCursor;
                  if (_Bool == false)
                  {
                    pFtCursor = _pFeatureClass.Search (null, _Bool);
                    pFt1 = pFtCursor.NextFeature ();
                    while (pFt1 != null)
                    {
                      pFt2 = pFtCursor.NextFeature ();
                      if (pFt1 == pFt2)
                      {
                        MessageBox.Show ("Recycling 参数是 false");
                      }
                      pFt1 = pFtCursor.NextFeature ();
                    }
                  } else
                  {
                    pFtCursor = _pFeatureClass.Search (null,Bool);
                    pFt1 = pFtCursor.NextFeature ();
                    while (pFt1 != null)
                    {
                      pFt2 = pFtCursor.NextFeature ();
                      if (pFt1 == pFt2)
                      {
                        MessageBox.Show ("Recycling 参数是true");
                      }
                      pFt1 = pFtCursor.NextFeature ();
                    }
                  }
                }


                IMap pMap = axMapControl1.Map; 
                IFeatureLayer pFeaturelayer = GetLayer (pMap, "Roads") as IFeatureLayer;
                IFeatureSelection pFeatureSelection = pFeaturelayer as IFeatureSelection;
                IQueryFilter pQuery = new QueryFilterClass (); 
                pQuery.WhereClause = "TYPE='paved'";
                pFeatureSelection.SelectFeatures (pQuery,  esriSelectionResultEnum.esriSelectionResultNew, false);
                axMapControl1.ActiveView.Refresh ();





                List<IFeature> pList = new List<IFeature>();//用于存储选中的要素
                IEnumFeature pEnumFeature = axMapControl1.Map.FeatureSelection as IEnumFeature;
                IFeature pFeature = pEnumFeature.Next();
                while(pFeature!=null)
                {
                   pList.Add(pFeature);
                   pFeature = pEnumFeature.Next();
                }
 
 Arcgis Engine 切割图斑（ITool） 
 public override void OnMouseDown( int Button, int Shift, int X, int Y)
{
     // TODO:  Add Cut.OnMouseDown implementation
     if (Button==1) //左键按下
     {
         //拿到hook
         IMapControl3 pMapControlx = (IMapControl3)m_hookHelper.Hook;
 
         IFeatureLayer pFeatureLayer = pMapControlx.get_Layer(0) as IFeatureLayer;
 
         //划线
         IGeometry pline = (IGeometry)pMapControlx.TrackLine();
 
         
         //拿到划线范围内的所有feature
         IGeometry pGeometry = pline as IGeometry;
         IMap pMap = pMapControlx.Map;
         pMap.SelectByShape(pGeometry, null , false );<br>
         //转成IRealtionOperator接口，以便在遍历时判断几何位置关系。
         IRelationalOperator rela = (pline as IPolyline) as IRelationalOperator;
 
         //拿到切割目标集合
         IEnumFeature pEnumFeature = (IEnumFeature)pMap.FeatureSelection;
         IFeature pFeature = pEnumFeature.Next();
         //依次遍历
         while (pFeature != null )
         {
             
             if (rela.Crosses(pFeature.Shape)) //判断是否Cross
             {
                 try
                 {
                     //把面转成ITopologicalOperator，使用Cut函数
                     ITopologicalOperator topo = (pFeature.Shape as IPolygon) as ITopologicalOperator;
 
                     //新建两个面，作为切割函数的参数，切割后的两个对象保存于这两个面之中
                     IGeometry pLeftGeometry = new PolygonClass();
                     IGeometry pRightGeometry = new PolygonClass();
                     topo.Cut((pline as IPolyline), out pLeftGeometry, out pRightGeometry);
 
                     //由FeatureClass新建Feature
                     IFeature pFeatureLeft = pFeatureLayer.FeatureClass.CreateFeature();
                     IFeature pFeatureRight = pFeatureLayer.FeatureClass.CreateFeature();
 
                     //保存
                     pFeatureLeft.Shape = pLeftGeometry;
                     pFeatureRight.Shape = pRightGeometry;
                     pFeatureLeft.Store();
                     pFeatureRight.Store();
 
                     //删除
                     pFeature.Delete();
                     
 
                 }
                 catch
                 {
                 
                 }
             }
 
             pFeature = pEnumFeature.Next();
         }
 
         //清除选择
         IFeatureSelection pFeatureSelectionClear= pMapControlx.get_Layer(0) as IFeatureSelection;
         pFeatureSelectionClear.Clear();
 
         pMapControlx.Refresh();
     }
}